#!/usr/bin/env python

import os
import sys
import argparse


####################################################################################################
#
# Argument parsing and checking


class MyParser(argparse.ArgumentParser):
    def print_usage(self, file=None):
        if file is None:
            file = sys.stdout

        print >>file, "Usage: rfp-to-frb-olympics [-fh] [-t tex_label] -o outfile.json <rfp_file1.json> ... <rfp_fileN.json>"
        print >>file, "    -f: if output file exists, overwrite it (default is to fail with an error)"
        print >>file, "    -t: this flag can be used to specify frb_olympics tex label (default is derived from output filename)"
        print >>file, "    -h: show longer help message and exit"


    def error(self, message=None):
        self.print_usage(sys.stderr)

        if message is not None:
            print >>sys.stderr, '\nError:', message

        sys.exit(2)

    
    def print_help(self, file=None):
        self.print_usage(file)
        print >>file
        print >>file, 'This utility program reads one or more \"rf_pipelines\" json_files'
        print >>file, '(which represent serialized pipeline objects, such as RFI clippers or dedispersers)'
        print >>file, 'concatenates them into a pipeline, and serializes the result as an \"frb_olympics\"'
        print >>file, "json file, for later use (e.g. in the 'run-frb-olympics' utility program)"
        print >>file        
        print >>file, "Note: you will probably want to verify the output file, with something like:"
        print >>file, "   run-frb-olympics -o deleteme -n 1 search_params.json output_file.json"
        print >>file
        print >>file, "For an example, see 'examples/example2_rf_pipelines' in the frb_olympics source tree."
        print >>file

parser = MyParser()

parser.add_argument('rfp_filenames', nargs='+')
parser.add_argument('-f', action='store_true')
parser.add_argument('-o', dest='outfile')
parser.add_argument('-t', dest='tex_label')

args = parser.parse_args()

if args.outfile is None:
    parser.error("The -o flag is mandatory")

if (not args.f) and os.path.exists(args.outfile):
    parser.error("rfp-to-frb-olympics: output file '%s' exists (need to either delete this file, or invoke rfp-to-frb-olympics with the -f flag)" % args.outfile)

tex_label = args.tex_label

if tex_label is None:
    tex_label = os.path.basename(args.outfile)
    tex_label = tex_label.split('.')[0]
    print "Note: using tex_label '%s' (to change, either edit the json output file, or invoke rfp-to-frb-olympics with the -t flag)" % tex_label


####################################################################################################


import json
import frb_olympics
import rf_pipelines

t = [ ]

for f in args.rfp_filenames:
    j = rf_pipelines.json_read(f)
    p = rf_pipelines.pipeline_object.from_json(j)
    t.append(p)

# (list of rf_pipelines.pipeline_objects) -> rf_pipelines.pipeline_object
t = rf_pipelines.pipeline(t) if (len(t) > 1) else t[0]

# rf_pipelines.pipeline_object -> frb_olympics.rf_pipelines_dedisperser
t = frb_olympics.rf_pipelines_dedisperser(t, tex_label)

# frb_olympics.rf_pipelines_dedisperser -> json (dictionary)
t = t.jsonize()

f = open(args.outfile, 'w')
json.dump(t, f, indent=4)
print >>f, ''   # extra newline
f.close()

print 'wrote', args.outfile
